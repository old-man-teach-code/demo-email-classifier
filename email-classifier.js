const { EMAIL_PATTERNS } = require('./email-patterns');

/**
 * Ph√¢n lo·∫°i email d·ª±a tr√™n c√°c d·∫•u hi·ªáu nh·∫≠n bi·∫øt
 * @param {Object} email - Email c·∫ßn ph√¢n lo·∫°i
 * @param {string} email.title - Ti√™u ƒë·ªÅ email
 * @param {string} email.content - N·ªôi dung email
 * @param {string} email.from_email - Email ng∆∞·ªùi g·ª≠i
 * @returns {Object} K·∫øt qu·∫£ ph√¢n lo·∫°i v·ªõi category v√† indicators
 */
function classifyEmail(email) {
    const { title, content, from_email } = email;

    // Kh·ªüi t·∫°o k·∫øt qu·∫£ v·ªõi gi√° tr·ªã m·∫∑c ƒë·ªãnh
    const result = {
        category: 'An to√†n',
        confidence: 0,
        indicators: [],
        level: 'basic'
    };

    // Ki·ªÉm tra t·ª´ng lo·∫°i email theo th·ª© t·ª± ∆∞u ti√™n
    // 1. Ki·ªÉm tra Phishing tr∆∞·ªõc (nguy hi·ªÉm nh·∫•t)
    const phishingCheck = checkPhishing(title, content, from_email);
    if (phishingCheck.isPhishing) {
        return {
            category: 'Gi·∫£ m·∫°o',
            confidence: phishingCheck.confidence,
            indicators: phishingCheck.indicators,
            level: phishingCheck.level
        };
    }

    // 2. Ki·ªÉm tra Spam
    const spamCheck = checkSpam(title, content, from_email);
    if (spamCheck.isSpam) {
        return {
            category: 'Spam',
            confidence: spamCheck.confidence,
            indicators: spamCheck.indicators,
            level: spamCheck.level
        };
    }

    // 3. Ki·ªÉm tra Nghi ng·ªù
    const suspiciousCheck = checkSuspicious(title, content, from_email);
    if (suspiciousCheck.isSuspicious) {
        return {
            category: 'Nghi ng·ªù',
            confidence: suspiciousCheck.confidence,
            indicators: suspiciousCheck.indicators,
            level: suspiciousCheck.level
        };
    }

    // 4. Ki·ªÉm tra An to√†n
    const safeCheck = checkSafe(title, content, from_email);
    if (safeCheck.isSafe) {
        return {
            category: 'An to√†n',
            confidence: safeCheck.confidence,
            indicators: ['Email t·ª´ ngu·ªìn tin c·∫≠y', 'Kh√¥ng c√≥ d·∫•u hi·ªáu ƒë√°ng ng·ªù'],
            level: 'basic'
        };
    }

    // N·∫øu kh√¥ng r√µ r√†ng, m·∫∑c ƒë·ªãnh l√† Nghi ng·ªù v·ªõi confidence th·∫•p
    return {
        category: 'Nghi ng·ªù',
        confidence: 0.3,
        indicators: ['Kh√¥ng th·ªÉ x√°c ƒë·ªãnh r√µ r√†ng'],
        level: 'basic'
    };
}

/**
 * Ki·ªÉm tra email Phishing (Gi·∫£ m·∫°o)
 */
function checkPhishing(title, content, from_email) {
    const patterns = EMAIL_PATTERNS.phishing;
    const indicators = [];
    let matchCount = 0;
    let level = 'basic';

    // Ki·ªÉm tra domain gi·∫£ m·∫°o trong email g·ª≠i
    const domain = from_email.split('@')[1] || '';

    // Ki·ªÉm tra brand spoofing (v√≠ d·ª•: Amaz0n, G00gle)
    for (const brandPattern of patterns.basic.brandSpoofing) {
        if (brandPattern.test(from_email) || brandPattern.test(content)) {
            indicators.push('Gi·∫£ m·∫°o th∆∞∆°ng hi·ªáu v·ªõi k√Ω t·ª± s·ªë thay ch·ªØ');
            matchCount += 2; // Tr·ªçng s·ªë cao cho brand spoofing
        }
    }

    // Ki·ªÉm tra phishing domains (.tk, .ml, .ga, .cf)
    for (const phishDomain of patterns.basic.fromDomainPatterns) {
        if (phishDomain.test(domain)) {
            indicators.push(`Domain ƒë√°ng ng·ªù: ${domain}`);
            matchCount += 2;
        }
    }

    // Ki·ªÉm tra title patterns
    for (const pattern of patterns.basic.titlePatterns) {
        if (pattern.test(title)) {
            indicators.push('Ti√™u ƒë·ªÅ c√≥ d·∫•u hi·ªáu phishing');
            matchCount++;
        }
    }

    // Ki·ªÉm tra content patterns  
    for (const pattern of patterns.basic.contentPatterns) {
        if (pattern.test(content)) {
            indicators.push('N·ªôi dung y√™u c·∫ßu x√°c minh kh·∫©n c·∫•p');
            matchCount++;
        }
    }

    // Ki·ªÉm tra advanced patterns n·∫øu c√≥
    if (patterns.advanced && matchCount < 3) {
        level = 'advanced';
        // Ki·ªÉm tra c√°c d·∫•u hi·ªáu tinh vi h∆°n
        if (/ph√≤ng.*k·∫ø.*to√°n/i.test(from_email) || /accounting/i.test(from_email)) {
            indicators.push('Gi·∫£ danh ph√≤ng ban n·ªôi b·ªô');
            matchCount++;
        }
    }

    const confidence = Math.min(matchCount * 0.25, 1);

    return {
        isPhishing: matchCount >= 2,
        confidence,
        indicators,
        level
    };
}

/**
 * Ki·ªÉm tra email Spam
 */
function checkSpam(title, content, from_email) {
    const patterns = EMAIL_PATTERNS.spam;
    const indicators = [];
    let matchCount = 0;
    let level = 'basic';

    // Ki·ªÉm tra basic spam patterns
    // 1. Title v·ªõi gi·∫£m gi√°, vi·∫øt hoa, emoji
    for (const pattern of patterns.basic.titlePatterns) {
        if (pattern.test(title)) {
            if (/[0-9]{2,}%/i.test(title)) {
                indicators.push('Qu·∫£ng c√°o gi·∫£m gi√° l·ªõn');
            } else if (/!!!/i.test(title)) {
                indicators.push('S·ª≠ d·ª•ng nhi·ªÅu d·∫•u ch·∫•m than');
            } else if (/üí∞|üéâ|üî•/.test(title)) {
                indicators.push('S·ª≠ d·ª•ng emoji spam');
            }
            matchCount++;
        }
    }

    // 2. Content patterns
    for (const pattern of patterns.basic.contentPatterns) {
        if (pattern.test(content)) {
            if (/bit\.ly|tinyurl/.test(content)) {
                indicators.push('Ch·ª©a link r√∫t g·ªçn ƒë√°ng ng·ªù');
                matchCount += 2; // Tr·ªçng s·ªë cao cho shortened links
            } else {
                indicators.push('N·ªôi dung spam ƒëi·ªÉn h√¨nh');
                matchCount++;
            }
        }
    }

    // 3. From domain patterns
    const domain = from_email.split('@')[1] || '';
    for (const pattern of patterns.basic.fromDomainPatterns) {
        if (pattern.test(domain)) {
            indicators.push('Domain spam th∆∞∆°ng m·∫°i');
            matchCount++;
        }
    }

    // Ki·ªÉm tra advanced spam (marketing tinh vi)
    if (patterns.advanced && matchCount < 2) {
        level = 'advanced';
        for (const pattern of patterns.advanced.contentPatterns) {
            if (pattern.test(content)) {
                indicators.push('Marketing email v·ªõi trigger t√¢m l√Ω');
                matchCount++;
            }
        }
    }

    const confidence = Math.min(matchCount * 0.3, 1);

    return {
        isSpam: matchCount >= 2,
        confidence,
        indicators,
        level
    };
}

/**
 * Ki·ªÉm tra email Nghi ng·ªù
 */
function checkSuspicious(title, content, from_email) {
    const patterns = EMAIL_PATTERNS.suspicious;
    const indicators = [];
    let matchCount = 0;
    let level = 'basic';

    // 1. Ki·ªÉm tra title patterns (kh·∫©n, g·∫•p, urgent)
    for (const pattern of patterns.basic.titlePatterns) {
        if (pattern.test(title)) {
            indicators.push('T·∫°o √°p l·ª±c th·ªùi gian trong ti√™u ƒë·ªÅ');
            matchCount++;
        }
    }

    // 2. Ki·ªÉm tra content patterns
    for (const pattern of patterns.basic.contentPatterns) {
        if (pattern.test(content)) {
            if (/trong v√≤ng.*[0-9]+.*gi·ªù/i.test(content)) {
                indicators.push('Y√™u c·∫ßu h√†nh ƒë·ªông trong th·ªùi gian ng·∫Øn');
            } else if (/vui l√≤ng.*cung c·∫•p/i.test(content)) {
                indicators.push('Y√™u c·∫ßu cung c·∫•p th√¥ng tin');
            } else {
                indicators.push('N·ªôi dung c√≥ d·∫•u hi·ªáu ƒë√°ng ng·ªù');
            }
            matchCount++;
        }
    }

    // 3. Ki·ªÉm tra domain patterns
    const domain = from_email.split('@')[1] || '';
    for (const pattern of patterns.basic.fromDomainPatterns) {
        if (pattern.test(domain)) {
            indicators.push(`Domain kh√¥ng ch√≠nh th·ª©c: ${domain}`);
            matchCount++;
        }
    }

    // 4. Ki·ªÉm tra l·ªói ch√≠nh t·∫£ (spelling errors)
    if (patterns.basic.spellingErrors) {
        const fullText = title + ' ' + content;
        for (const errorPattern of patterns.basic.spellingErrors) {
            if (errorPattern.test(fullText)) {
                indicators.push('C√≥ l·ªói ch√≠nh t·∫£ ƒë√°ng ng·ªù');
                matchCount++;
                break;
            }
        }
    }

    const confidence = Math.min(matchCount * 0.35, 1);

    return {
        isSuspicious: matchCount >= 2,
        confidence,
        indicators,
        level
    };
}

/**
 * Ki·ªÉm tra email An to√†n
 */
function checkSafe(title, content, from_email) {
    const patterns = EMAIL_PATTERNS.safe;
    let safeScore = 0;

    // 1. Ki·ªÉm tra domain tin c·∫≠y
    const domain = from_email.split('@')[1] || '';
    for (const pattern of patterns.requiredPatterns.fromDomainPatterns) {
        if (pattern.test(from_email)) {
            safeScore += 2; // Domain tin c·∫≠y c√≥ tr·ªçng s·ªë cao
            break;
        }
    }

    // 2. Ki·ªÉm tra l·ªùi ch√†o chuy√™n nghi·ªáp
    for (const pattern of patterns.requiredPatterns.professionalGreetings) {
        if (pattern.test(content)) {
            safeScore++;
            break;
        }
    }

    // 3. Ki·ªÉm tra l·ªùi k·∫øt chuy√™n nghi·ªáp
    for (const pattern of patterns.requiredPatterns.professionalClosings) {
        if (pattern.test(content)) {
            safeScore++;
            break;
        }
    }

    // 4. ƒê·∫£m b·∫£o KH√îNG c√≥ c√°c t·ª´ nghi ng·ªù
    let hasSuspiciousWords = false;
    for (const pattern of patterns.mustNotHave.suspiciousWords) {
        if (pattern.test(content) || pattern.test(title)) {
            hasSuspiciousWords = true;
            break;
        }
    }

    // Email an to√†n n·∫øu:
    // - C√≥ domain tin c·∫≠y (score >= 2) V√Ä
    // - Kh√¥ng c√≥ t·ª´ nghi ng·ªù V√Ä
    // - C√≥ √≠t nh·∫•t 1 y·∫øu t·ªë chuy√™n nghi·ªáp kh√°c
    const isSafe = safeScore >= 3 && !hasSuspiciousWords;
    const confidence = isSafe ? Math.min(safeScore * 0.25, 1) : 0;

    return {
        isSafe,
        confidence
    };
}

// Helper function: Ph√¢n t√≠ch chi ti·∫øt m·ªôt email
function analyzeEmail(email) {
    console.log('\n=== PH√ÇN T√çCH EMAIL ===');
    console.log('Ti√™u ƒë·ªÅ:', email.title);
    console.log('T·ª´:', email.from_email);
    console.log('---');

    const result = classifyEmail(email);

    console.log('K·∫æT QU·∫¢ PH√ÇN LO·∫†I:');
    console.log('- Lo·∫°i:', result.category);
    console.log('- ƒê·ªô tin c·∫≠y:', (result.confidence * 100).toFixed(0) + '%');
    console.log('- Level:', result.level);
    console.log('- D·∫•u hi·ªáu nh·∫≠n bi·∫øt:');
    result.indicators.forEach(indicator => {
        console.log('  ‚Ä¢', indicator);
    });
    console.log('======================\n');

    return result;
}

module.exports = {
    classifyEmail,
    analyzeEmail,
    // Export c√°c h√†m check ri√™ng l·∫ª n·∫øu c·∫ßn
    checkPhishing,
    checkSpam,
    checkSuspicious,
    checkSafe
};